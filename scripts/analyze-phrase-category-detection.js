const { BigQuery } = require('@google-cloud/bigquery');

const bigquery = new BigQuery({
  projectId: 'viewpers'
});

async function analyzePhraseCategoryDetection() {
  try {
    console.log('üîç 6„Å§„ÅÆ„Éï„É¨„Éº„Ç∫„Ç´„ÉÜ„Ç¥„É™„Åå„Åù„Çå„Åû„Çå‰Ωï‰ª∂ÂΩì„Å¶„ÅØ„Åæ„Çã„Åã„ÇíÂàÜÊûê„Åó„Åæ„Åô...\n');

    // 1. ÂêÑ„Ç´„ÉÜ„Ç¥„É™„ÅÆ„Éï„É¨„Éº„Ç∫ÂÆöÁæ©„ÇíÂèñÂæó
    console.log('üìä „Çπ„ÉÜ„ÉÉ„Éó1: „Éï„É¨„Éº„Ç∫„Ç´„ÉÜ„Ç¥„É™„ÅÆÂÆöÁæ©Á¢∫Ë™ç');
    const phraseDefinitions = await bigquery.query(`
      SELECT 
        category,
        phrases,
        priority,
        delay,
        description
      FROM \`viewpers.salesguard_data.phrase_logic\`
      ORDER BY category
    `);

    console.log('  - „Éï„É¨„Éº„Ç∫„Ç´„ÉÜ„Ç¥„É™ÂÆöÁæ©:');
    phraseDefinitions[0].forEach((row, index) => {
      console.log(`    ${index + 1}. „Ç´„ÉÜ„Ç¥„É™: ${row.category}`);
      console.log(`       ÂÑ™ÂÖàÂ∫¶: ${row.priority}`);
      console.log(`       ÈÅÖÂª∂: ${row.delay}Êó•`);
      console.log(`       Ë™¨Êòé: ${row.description}`);
      console.log(`       „Éï„É¨„Éº„Ç∫: ${row.phrases}`);
      console.log('');
    });

    // 2. ÂêÑ„Ç´„ÉÜ„Ç¥„É™„ÅÆÊ§úÁü•ÁµêÊûú„ÇíÂàÜÊûê
    console.log('üîç „Çπ„ÉÜ„ÉÉ„Éó2: ÂêÑ„Ç´„ÉÜ„Ç¥„É™„ÅÆÊ§úÁü•ÁµêÊûúÂàÜÊûê');

    // Ëß£Á¥Ñ„Ç´„ÉÜ„Ç¥„É™
    console.log('  - Ëß£Á¥Ñ„Ç´„ÉÜ„Ç¥„É™„ÅÆÊ§úÁü•ÁµêÊûú:');
    const cancelDetection = await bigquery.query(`
      SELECT 
        COUNT(DISTINCT alert_id) as detected_alerts,
        COUNT(*) as total_records,
        COUNT(DISTINCT message_id) as unique_messages,
        ROUND(COUNT(DISTINCT alert_id) * 100.0 / (
          SELECT COUNT(DISTINCT alert_id) 
          FROM \`viewpers.salesguard_data.completely_decoded_emails\` 
          WHERE segment_id IS NOT NULL
        ), 1) as detection_rate
      FROM \`viewpers.salesguard_data.completely_decoded_emails\`
      WHERE segment_id IS NOT NULL
        AND (
          LOWER(decoded_subject) LIKE '%Â•ëÁ¥Ñ„ÇíË¶ãÁõ¥„Åó„Åü„ÅÑ%'
          OR LOWER(decoded_subject) LIKE '%‰ªñÁ§æ„ÇÇÊ§úË®é%'
          OR LOWER(decoded_subject) LIKE '%ÊñôÈáë„Éó„É©„É≥„ÅÆÂ§âÊõ¥%'
          OR LOWER(decoded_subject) LIKE '%„Çµ„Éº„Éì„Çπ„ÅÆÂà©Áî®„ÇíÁµÇ‰∫Ü%'
          OR LOWER(decoded_subject) LIKE '%Ëß£Á¥Ñ„ÇíÊ§úË®é%'
        )
    `);

    if (cancelDetection[0].length > 0) {
      const result = cancelDetection[0][0];
      console.log(`     Ê§úÁü•„Ç¢„É©„Éº„ÉàÊï∞: ${result.detected_alerts.toLocaleString()}‰ª∂`);
      console.log(`     Á∑è„É¨„Ç≥„Éº„Éâ: ${result.total_records.toLocaleString()}‰ª∂`);
      console.log(`     „É¶„Éã„Éº„ÇØ„É°„ÉÉ„Çª„Éº„Ç∏: ${result.unique_messages.toLocaleString()}‰ª∂`);
      console.log(`     Ê§úÁü•Áéá: ${result.detection_rate}%`);
    } else {
      console.log('     Ê§úÁü•ÁµêÊûú„Å™„Åó');
    }

    // Á´∂Âêà„Ç´„ÉÜ„Ç¥„É™
    console.log('\n  - Á´∂Âêà„Ç´„ÉÜ„Ç¥„É™„ÅÆÊ§úÁü•ÁµêÊûú:');
    const competitorDetection = await bigquery.query(`
      SELECT 
        COUNT(DISTINCT alert_id) as detected_alerts,
        COUNT(*) as total_records,
        COUNT(DISTINCT message_id) as unique_messages,
        ROUND(COUNT(DISTINCT alert_id) * 100.0 / (
          SELECT COUNT(DISTINCT alert_id) 
          FROM \`viewpers.salesguard_data.completely_decoded_emails\` 
          WHERE segment_id IS NOT NULL
        ), 1) as detection_rate
      FROM \`viewpers.salesguard_data.completely_decoded_emails\`
      WHERE segment_id IS NOT NULL
        AND (
          LOWER(decoded_subject) LIKE '%Á´∂Âêà„ÅÆÊèêÊ°à%'
          OR LOWER(decoded_subject) LIKE '%‰ªñÁ§æ„Å®ÊØîËºÉ„Åó„Å¶%'
          OR LOWER(decoded_subject) LIKE '%aÁ§æ„Å®ÊØîËºÉÊ§úË®é%'
          OR LOWER(decoded_subject) LIKE '%Âæ°Á§æ„ÅÆÂÑ™‰ΩçÊÄß%'
        )
    `);

    if (competitorDetection[0].length > 0) {
      const result = competitorDetection[0][0];
      console.log(`     Ê§úÁü•„Ç¢„É©„Éº„ÉàÊï∞: ${result.detected_alerts.toLocaleString()}‰ª∂`);
      console.log(`     Á∑è„É¨„Ç≥„Éº„Éâ: ${result.total_records.toLocaleString()}‰ª∂`);
      console.log(`     „É¶„Éã„Éº„ÇØ„É°„ÉÉ„Çª„Éº„Ç∏: ${result.unique_messages.toLocaleString()}‰ª∂`);
      console.log(`     Ê§úÁü•Áéá: ${result.detection_rate}%`);
    } else {
      console.log('     Ê§úÁü•ÁµêÊûú„Å™„Åó');
    }

    // „Ç®„Çπ„Ç´„É¨„Éº„Ç∑„Éß„É≥„Ç´„ÉÜ„Ç¥„É™
    console.log('\n  - „Ç®„Çπ„Ç´„É¨„Éº„Ç∑„Éß„É≥„Ç´„ÉÜ„Ç¥„É™„ÅÆÊ§úÁü•ÁµêÊûú:');
    const escalationDetection = await bigquery.query(`
      SELECT 
        COUNT(DISTINCT alert_id) as detected_alerts,
        COUNT(*) as total_records,
        COUNT(DISTINCT message_id) as unique_messages,
        ROUND(COUNT(DISTINCT alert_id) * 100.0 / (
          SELECT COUNT(DISTINCT alert_id) 
          FROM \`viewpers.salesguard_data.completely_decoded_emails\` 
          WHERE segment_id IS NOT NULL
        ), 1) as detection_rate
      FROM \`viewpers.salesguard_data.completely_decoded_emails\`
      WHERE segment_id IS NOT NULL
        AND (
          LOWER(decoded_subject) LIKE '%Ë≤¨‰ªªËÄÖ„ÅÆÊñπ„ÅäÈ°ò„ÅÑ„Åó„Åæ„Åô%'
          OR LOWER(decoded_subject) LIKE '%Ë©±„Å´„Å™„Çä„Åæ„Åõ„Çì%'
          OR LOWER(decoded_subject) LIKE '%Ê≠£Âºè„Å´ÊäóË≠∞„Åó„Åæ„Åô%'
          OR LOWER(decoded_subject) LIKE '%Á¥çÂæó„ÅÑ„Åç„Åæ„Åõ„Çì%'
        )
    `);

    if (escalationDetection[0].length > 0) {
      const result = escalationDetection[0][0];
      console.log(`     Ê§úÁü•„Ç¢„É©„Éº„ÉàÊï∞: ${result.detected_alerts.toLocaleString()}‰ª∂`);
      console.log(`     Á∑è„É¨„Ç≥„Éº„Éâ: ${result.total_records.toLocaleString()}‰ª∂`);
      console.log(`     „É¶„Éã„Éº„ÇØ„É°„ÉÉ„Çª„Éº„Ç∏: ${result.unique_messages.toLocaleString()}‰ª∂`);
      console.log(`     Ê§úÁü•Áéá: ${result.detection_rate}%`);
    } else {
      console.log('     Ê§úÁü•ÁµêÊûú„Å™„Åó');
    }

    // ÈÅÖÂª∂„Éª„Éï„Ç©„É≠„Éº„Ç¢„ÉÉ„Éó„Ç´„ÉÜ„Ç¥„É™
    console.log('\n  - ÈÅÖÂª∂„Éª„Éï„Ç©„É≠„Éº„Ç¢„ÉÉ„Éó„Ç´„ÉÜ„Ç¥„É™„ÅÆÊ§úÁü•ÁµêÊûú:');
    const delayDetection = await bigquery.query(`
      SELECT 
        COUNT(DISTINCT alert_id) as detected_alerts,
        COUNT(*) as total_records,
        COUNT(DISTINCT message_id) as unique_messages,
        ROUND(COUNT(DISTINCT alert_id) * 100.0 / (
          SELECT COUNT(DISTINCT alert_id) 
          FROM \`viewpers.salesguard_data.completely_decoded_emails\` 
          WHERE segment_id IS NOT NULL
        ), 1) as detection_rate
      FROM \`viewpers.salesguard_data.completely_decoded_emails\`
      WHERE segment_id IS NOT NULL
        AND (
          LOWER(decoded_subject) LIKE '%„Å©„ÅÜ„Å™„Å£„Å¶„ÅÑ„Åæ„Åô„Åß„Åó„Çá„ÅÜ„Åã%'
          OR LOWER(decoded_subject) LIKE '%ÈÄ≤Êçó„ÅØ„ÅÑ„Åã„Åå„Åß„Åô„Åã%'
          OR LOWER(decoded_subject) LIKE '%„Åæ„Å†„Åß„Åó„Çá„ÅÜ„Åã%'
          OR LOWER(decoded_subject) LIKE '%ÂÖàÊó•„ÅäÂïè„ÅÑÂêà„Çè„Åõ„Åó„Åü‰ª∂%'
        )
    `);

    if (delayDetection[0].length > 0) {
      const result = delayDetection[0][0];
      console.log(`     Ê§úÁü•„Ç¢„É©„Éº„ÉàÊï∞: ${result.detected_alerts.toLocaleString()}‰ª∂`);
      console.log(`     Á∑è„É¨„Ç≥„Éº„Éâ: ${result.total_records.toLocaleString()}‰ª∂`);
      console.log(`     „É¶„Éã„Éº„ÇØ„É°„ÉÉ„Çª„Éº„Ç∏: ${result.unique_messages.toLocaleString()}‰ª∂`);
      console.log(`     Ê§úÁü•Áéá: ${result.detection_rate}%`);
    } else {
      console.log('     Ê§úÁü•ÁµêÊûú„Å™„Åó');
    }

    // Êá∏Âøµ„ÉªÁñëÂøµ„Ç´„ÉÜ„Ç¥„É™
    console.log('\n  - Êá∏Âøµ„ÉªÁñëÂøµ„Ç´„ÉÜ„Ç¥„É™„ÅÆÊ§úÁü•ÁµêÊûú:');
    const concernDetection = await bigquery.query(`
      SELECT 
        COUNT(DISTINCT alert_id) as detected_alerts,
        COUNT(*) as total_records,
        COUNT(DISTINCT message_id) as unique_messages,
        ROUND(COUNT(DISTINCT alert_id) * 100.0 / (
          SELECT COUNT(DISTINCT alert_id) 
          FROM \`viewpers.salesguard_data.completely_decoded_emails\` 
          WHERE segment_id IS NOT NULL
        ), 1) as detection_rate
      FROM \`viewpers.salesguard_data.completely_decoded_emails\`
      WHERE segment_id IS NOT NULL
        AND (
          LOWER(decoded_subject) LIKE '%Â∞ë„ÅóÊá∏Âøµ„Åó„Å¶„Åä„Çä„Åæ„Åô%'
          OR LOWER(decoded_subject) LIKE '%Ë™çË≠ò„Å´ÈΩüÈΩ¨„Åå„ÅÇ„Çã„Çà„ÅÜ„Åß„Åô%'
          OR LOWER(decoded_subject) LIKE '%Êú¨ÂΩì„Å´Â§ß‰∏àÂ§´„Åß„Åó„Çá„ÅÜ„Åã%'
          OR LOWER(decoded_subject) LIKE '%Â∞ë„Åó‰∏çÂÆâ„Åß„Åô%'
        )
    `);

    if (concernDetection[0].length > 0) {
      const result = concernDetection[0][0];
      console.log(`     Ê§úÁü•„Ç¢„É©„Éº„ÉàÊï∞: ${result.detected_alerts.toLocaleString()}‰ª∂`);
      console.log(`     Á∑è„É¨„Ç≥„Éº„Éâ: ${result.total_records.toLocaleString()}‰ª∂`);
      console.log(`     „É¶„Éã„Éº„ÇØ„É°„ÉÉ„Çª„Éº„Ç∏: ${result.unique_messages.toLocaleString()}‰ª∂`);
      console.log(`     Ê§úÁü•Áéá: ${result.detection_rate}%`);
    } else {
      console.log('     Ê§úÁü•ÁµêÊûú„Å™„Åó');
    }

    // ÊúüÂæÖÂÄ§„ÅÆÁõ∏ÈÅï„Ç´„ÉÜ„Ç¥„É™
    console.log('\n  - ÊúüÂæÖÂÄ§„ÅÆÁõ∏ÈÅï„Ç´„ÉÜ„Ç¥„É™„ÅÆÊ§úÁü•ÁµêÊûú:');
    const expectationDetection = await bigquery.query(`
      SELECT 
        COUNT(DISTINCT alert_id) as detected_alerts,
        COUNT(*) as total_records,
        COUNT(DISTINCT message_id) as unique_messages,
        ROUND(COUNT(DISTINCT alert_id) * 100.0 / (
          SELECT COUNT(DISTINCT alert_id) 
          FROM \`viewpers.salesguard_data.completely_decoded_emails\` 
          WHERE segment_id IS NOT NULL
        ), 1) as detection_rate
      FROM \`viewpers.salesguard_data.completely_decoded_emails\`
      WHERE segment_id IS NOT NULL
        AND (
          LOWER(decoded_subject) LIKE '%„ÅäË©±„Å®ÈÅï„ÅÜ„Çà„ÅÜ„Åß„Åô„Åå%'
          OR LOWER(decoded_subject) LIKE '%„Åß„Åç„Çã„Å®ËÅû„ÅÑ„Å¶„ÅÑ„Åæ„Åó„Åü%'
          OR LOWER(decoded_subject) LIKE '%Â•ëÁ¥Ñ„Å´„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„Åå%'
          OR LOWER(decoded_subject) LIKE '%„Çπ„Ç≥„Éº„ÉóÂ§ñ„ÅÆË™çË≠ò„Åß„Åô%'
        )
    `);

    if (expectationDetection[0].length > 0) {
      const result = expectationDetection[0][0];
      console.log(`     Ê§úÁü•„Ç¢„É©„Éº„ÉàÊï∞: ${result.detected_alerts.toLocaleString()}‰ª∂`);
      console.log(`     Á∑è„É¨„Ç≥„Éº„Éâ: ${result.total_records.toLocaleString()}‰ª∂`);
      console.log(`     „É¶„Éã„Éº„ÇØ„É°„ÉÉ„Çª„Éº„Ç∏: ${result.unique_messages.toLocaleString()}‰ª∂`);
      console.log(`     Ê§úÁü•Áéá: ${result.detection_rate}%`);
    } else {
      console.log('     Ê§úÁü•ÁµêÊûú„Å™„Åó');
    }

    // 3. Á∑èÂêàÂàÜÊûê
    console.log('\nüìä „Çπ„ÉÜ„ÉÉ„Éó3: Á∑èÂêàÂàÜÊûê');
    const overallStats = await bigquery.query(`
      SELECT 
        COUNT(DISTINCT alert_id) as total_alerts,
        COUNT(*) as total_records
      FROM \`viewpers.salesguard_data.completely_decoded_emails\`
      WHERE segment_id IS NOT NULL
    `);

    const overall = overallStats[0][0];
    console.log(`  - Á∑è„Ç¢„É©„Éº„ÉàÊï∞: ${overall.total_alerts.toLocaleString()}‰ª∂`);
    console.log(`  - Á∑è„É¨„Ç≥„Éº„ÉâÊï∞: ${overall.total_records.toLocaleString()}‰ª∂`);

    // 4. „Çµ„É≥„Éó„É´Ê§úÁü•ÁµêÊûú
    console.log('\nüìù „Çπ„ÉÜ„ÉÉ„Éó4: „Çµ„É≥„Éó„É´Ê§úÁü•ÁµêÊûú');
    
    // Ëß£Á¥Ñ„Ç´„ÉÜ„Ç¥„É™„ÅÆ„Çµ„É≥„Éó„É´
    const cancelSamples = await bigquery.query(`
      SELECT 
        alert_id,
        decoded_subject,
        quality_score
      FROM \`viewpers.salesguard_data.completely_decoded_emails\`
      WHERE segment_id IS NOT NULL
        AND (
          LOWER(decoded_subject) LIKE '%Â•ëÁ¥Ñ„ÇíË¶ãÁõ¥„Åó„Åü„ÅÑ%'
          OR LOWER(decoded_subject) LIKE '%‰ªñÁ§æ„ÇÇÊ§úË®é%'
          OR LOWER(decoded_subject) LIKE '%ÊñôÈáë„Éó„É©„É≥„ÅÆÂ§âÊõ¥%'
          OR LOWER(decoded_subject) LIKE '%„Çµ„Éº„Éì„Çπ„ÅÆÂà©Áî®„ÇíÁµÇ‰∫Ü%'
          OR LOWER(decoded_subject) LIKE '%Ëß£Á¥Ñ„ÇíÊ§úË®é%'
        )
      LIMIT 5
    `);

    if (cancelSamples[0].length > 0) {
      console.log('  - Ëß£Á¥Ñ„Ç´„ÉÜ„Ç¥„É™„ÅÆ„Çµ„É≥„Éó„É´:');
      cancelSamples[0].forEach((row, index) => {
        console.log(`    ${index + 1}. ${row.decoded_subject} (ÂìÅË≥™: ${row.quality_score}ÁÇπ)`);
      });
    }

    return {
      success: true,
      totalAlerts: overall.total_alerts,
      totalRecords: overall.total_records
    };

  } catch (error) {
    console.error('‚ùå „Ç®„É©„Éº:', error.message);
    return { success: false, error: error.message };
  }
}

// ÂÆüË°å
if (require.main === module) {
  analyzePhraseCategoryDetection()
    .then(result => {
      if (result.success) {
        console.log('\nüéâ „Éï„É¨„Éº„Ç∫„Ç´„ÉÜ„Ç¥„É™Ê§úÁü•ÂàÜÊûêÂÆå‰∫ÜÔºÅ');
        console.log(`üìä Á∑è„Ç¢„É©„Éº„ÉàÊï∞: ${result.totalAlerts.toLocaleString()}‰ª∂`);
        console.log(`üìä Á∑è„É¨„Ç≥„Éº„ÉâÊï∞: ${result.totalRecords.toLocaleString()}‰ª∂`);
      } else {
        console.log('\n‚ùå ÂàÜÊûê„ÅåÂ§±Êïó„Åó„Åæ„Åó„Åü:', result.error);
      }
    })
    .catch(console.error);
}

module.exports = { analyzePhraseCategoryDetection }; 